(function () {
'use strict';

class Utils {
    constructor() {}

    static initTemplate(wrapperEl, templateId) {
        let template = document.querySelector(`#${templateId}`);
        let clon = template.content.cloneNode(true);
        wrapperEl.innerHTML = '';
        wrapperEl.appendChild(clon);
    }

    static setActiveLink(elem, object) {
        object.forEach(item => {
            if (item == elem) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        });
    }

    static navigateTo(routeName) {
        window.location.hash = "#" + routeName;
    }

    static isLoggedIn() {
        let credentials = JSON.parse(localStorage.getItem('credentials'));
        return !!credentials;
    }

    static setLocalStorage(value, key) {
        localStorage.setItem(value, key);
    }

    static getLocalStorage(value) {
        return localStorage.getItem(value);
    }
}

class LoginModel {
    constructor() {
        this.userUrl = 'https://gist.githubusercontent.com/Igor-Garnik/4393129d0e1985c5fb76d3d84a38a1db/raw/ae59f915950daa2e9d673db9534d2c4009cb9aa5/admin-user';
        this.emailPattern = /^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/;
        this.passwordPattern = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,12}$/;
        this.errorMsg = null;
        this.errorsMsgList = {
            "empty": 'Пожалуйста заполните поля логин и пароль',
            "logError": 'Логин введен неверно. Только латинские буквы.',
            "passError": 'Пароль введен неверно. Тольк латинские буквы, цифры. Длина не менее 8 символов',
            "missmatch": 'Неправильные логин или пароль.'
        };
    }

    validate(credentials) {
        return this.isEmpty(credentials) && this.isEmailMissmatchPattern(credentials) && this.isPasswordMissmatchPattern(credentials);
    }

    isEmpty(credentials) {
        return credentials.login && credentials.password || this.setErrorMsg("empty");
    }

    isEmailMissmatchPattern(credentials) {
        return this.emailPattern.test(cradentials.login) || this.setErrorMsg("logError");
    }

    isPasswordMissmatchPattern(credentials) {
        return this.passwordPattern.test(credentials.password) || this.setErrorMsg("passError");
    }

    setErrorMsg(key) {
        this.errorMsg = this.errorsMsgList[key];
        return false;
    }

    getErrorMsg() {
        return this.errorMsg;
    }

    login(credentials) {
        let options = {
            headers: {
                'Content-type': 'application/json; charset=utf-8'
            },
            method: 'post',
            body: JSON.stringify(credentials)
        };
        return fetch(this.userUrl, options).then(responce => responce.json()).then(data => {
            if (data.loginStatus) {
                localStorage.setItem('credentials', JSON.stringify(credentials));
            } else {
                this.setErrorMsg("missmatch");
            }
            return data;
        });
    }

    logOut() {
        localStorage.removeItem('credentials');
    }

}

class LoginView {
    constructor() {
        this.domElements = {
            "logInBtn": document.querySelector("#log-in-btn"),
            "logOutBtn": document.querySelector("#log-out-btn"),
            "login": document.querySelector("#inputEmail"),
            "password": document.querySelector("#inputPassword"),
            "navigationPanel": document.querySelector("#top-panel-navigation"),

            "showPasswordBtn": document.querySelector("#show-password"),
            "loginForm": document.querySelector("#login-form"),
            "alertWindow": document.querySelector(".alert-window"),
            "galleryWindow": document.querySelector(".gallery-window"),
            "userWindow": document.querySelector(".user-window"),
            "mainMenu": document.querySelector(".main-menu"),
            "inputPassword": document.querySelector("#otputPassword"),
            "inputEmail": document.querySelector("#otputEmail")

        };
    }

    getCradentials() {
        return {
            login: this.domElements.login.value,
            password: this.domElements.password.value
        };
    }

    hideMsg() {
        this.domElements.alertWindow.classList.add("hide");
    }

    showNavigation() {
        this.domElements.navigationPanel.classList.remove("hide");
    }

    hideLogout() {
        this.domElements.navigationPanel.classList.add("hide");
    }

}

class LoginController {
    constructor(model, view, utils) {
        this.model = model;
        this.view = view;
        this.util = utils;
        this.init();
    }

    init() {
        this.initListeners();
    }

    initListeners() {
        this.view.domElements.logInBtn.addEventListener('click', this.loginHandler.bind(this));
        this.view.domElements.logOutBtn.addEventListener('click', this.logOutHandler.bind(this));
    }

    loginHandler(e) {
        e.preventDefault();
        let credentials = this.view.getCredentials();
        if (this.model.validate(credentials)) {
            this.model.login(credentials).then(data => {
                if (data.liginSatus) {
                    this.view.hideMsg();
                    this.view.showNavigation();
                    this.utils.navigateTo("gallery");
                }
            });
        }
    }

    logOutHandler() {
        this.view.hideNavigation();
        this.model.logOut();
        this.utils.navigateTo("");
    }

}

let wraper = document.querySelector("#wrapper");
let usersLisr = "https://gist.githubusercontent.com/Igor-Garnik/7bcff581fb9f75cd21b6a5653a626ce6/raw/6439cf4ca5f8f3136be569716dbe422c4595a4b5/users-list";

let routeConfig = {
    "": () => {
        Utils.initTemplate(wrapper, "login-view");
        let model = new LoginModel(usersLisr);
        let view = new LoginView();
        let controller = new LoginController(model, view, Utils);
    },
    "gallery": () => {
        Utils.initTemplate(wrapper, "gallery-view");
        let observer = new Observer();
    },
    "profile": () => {
        Utils.initTemplate(wrapper, "profile-view");
    }
};

function activateRoute(routeName) {
    let route = routeConfig[routeName];
    route && route();
}

function updateRoute() {
    let routeName = document.location.hash.replace(/^#/, '');
    if (routeName) {
        Utils.navigateTo(routeName);
        activateRoute(routeName);
    } else {
        activateRoute(routeName);
    }
}

window.addEventListener('load', updateRoute);
window.addEventListener('hashchange', updateRoute);

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
